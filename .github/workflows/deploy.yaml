# .github/workflows/paytrack-ci-cd.yaml
permissions:
  contents: write

name: PayTrack CI/CD

on:
  push:
    branches:
      - main
      - CICD-argoCD
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'charts/paytrack/**'

jobs:
  build-and-deploy:
    name: Build Docker Images
    runs-on: self-hosted
    env:
      BACKEND_IMAGE: noor2205/paytrack-backend
      FRONTEND_IMAGE: noor2205/paytrack-frontend
      CHART_PATH: charts/paytrack

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get short commit ID
        shell: powershell
        run: |
          $short = $Env:GITHUB_SHA.Substring(0,7)
          Add-Content $Env:GITHUB_ENV "COMMIT_ID=$short"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend
        shell: powershell
        run: |
          docker build -t "${env:BACKEND_IMAGE}:${env:COMMIT_ID}" -f docker/Dockerfile.backend .
          docker push "${env:BACKEND_IMAGE}:${env:COMMIT_ID}"

      - name: Build & Push Frontend
        shell: powershell
        run: |
          docker build -t "${env:FRONTEND_IMAGE}:${env:COMMIT_ID}" -f docker/Dockerfile.frontend .
          docker push "${env:FRONTEND_IMAGE}:${env:COMMIT_ID}"

      - name: Update values.yaml with new tag
        shell: powershell
        run: |
          (Get-Content "$env:CHART_PATH\values.yaml") `
            -replace 'tag: .*', "tag: $env:COMMIT_ID" `
            | Set-Content "$env:CHART_PATH\values.yaml"

      - name: Commit updated values.yaml
        uses: EndBug/add-and-commit@v9
        with:
          message: "chore: update image tag to ${{ env.COMMIT_ID }}"
          add: "${{ env.CHART_PATH }}/values.yaml"
          push: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

  argocd-install:
    name: Install ArgoCD CLI
    runs-on: self-hosted
    needs: build-and-deploy
    steps:
      - name: Install ArgoCD CLI on Windows
        shell: powershell
        run: |
          # Download the Windows executable
          Invoke-WebRequest `
            -Uri 'https://github.com/argoproj/argo-cd/releases/latest/download/argocd-windows-amd64.exe' `
            -OutFile 'argocd.exe'

          # Move into D:\argocd and add to PATH
          $installDir = 'D:\argocd'
          if (-not (Test-Path $installDir)) {
            New-Item -ItemType Directory -Path $installDir | Out-Null
          }
          Move-Item -Force 'argocd.exe' "$installDir\argocd.exe"
          [Environment]::SetEnvironmentVariable('PATH', "$Env:PATH;$installDir", 'Process')

  argocd-sync:
    name: Trigger ArgoCD Sync
    runs-on: self-hosted
    needs: argocd-install
    steps:
      - name: Trigger ArgoCD Sync
        shell: powershell
        run: |
          # 1) Login to ArgoCD running at localhost:8083 (forwarded from svc/argocd-server:443)
          & 'D:\argocd\argocd.exe' login `
            --server https://localhost:8083 `
            --username admin `
            --password "${{ secrets.ARGOCD_PASSWORD }}" `
            --insecure

          # 2) Sync the app
          & 'D:\argocd\argocd.exe' app sync paytrack `
            --server https://localhost:8083 `
            --insecure
